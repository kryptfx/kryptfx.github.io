{
  "version": 3,
  "sources": ["../src/utils/uid.js", "../src/utils/upgrade-property.js", "../src/a-tab.js", "../src/a-tab-panel.js", "../src/a-tab-group.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * Generates a unique id of the form `${prefix}-${randomString}-${suffix}`.\n *\n * @param {string} [prefix=''] - The prefix to use for the id.\n * @param {string} [suffix=''] - The suffix to use for the id.\n * @returns {string} - The unique id.\n */\nconst uid = (prefix = '', suffix = '') => {\n  const prefixString = typeof prefix === 'string' && prefix !== '' ? prefix + '-' : '';\n  const suffixString = typeof suffix === 'string' && suffix !== '' ? '-' + suffix : '';\n  const randomString = Math.random().toString(36).substring(2, 8); // Pseudo-random string of six alphanumeric characters.\n\n  return `${prefixString}${randomString}${suffixString}`;\n};\n\nexport { uid };\n", "// @ts-check\n\n/**\n * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n * property and the instance property would prevent the class property setter from ever being called.\n *\n * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n *\n * @param {string} prop - The property to upgrade.\n * @param {any} instance - The instance of the tab.\n */\nconst upgradeProperty = (prop, instance) => {\n  if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n    const value = instance[prop];\n    delete instance[prop];\n    instance[prop] = value;\n  }\n};\n\nexport { upgradeProperty };\n", "// @ts-check\n\nimport { uid } from './utils/uid.js';\nimport { upgradeProperty } from './utils/upgrade-property.js';\n\nlet tabCounter = 0;\n\nconst styles = /* css */ `\n  :host {\n    box-sizing: border-box;\n    display: inline-block;\n    contain: content;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  .tab {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    width: 100%;\n    padding: 0.375rem 0.75rem;\n    white-space: nowrap;\n    cursor: pointer;\n  }\n\n  :host([disabled]) .tab {\n    opacity: 0.7;\n    cursor: not-allowed;\n  }\n\n  :host([selected]) .tab {\n    color: var(--selected-tab-color);\n    background-color: var(--selected-tab-bg-color);\n  }\n\n  .tab__close {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.25rem;\n    font-size: inherit;\n    cursor: pointer;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */ `\n  <style>\n    ${styles}\n  </style>\n\n  <div part=\"base\" class=\"tab\">\n    <slot></slot>\n  </div>\n`;\n\n/**\n * @summary\n * This is a tab for a <a-tab-group> tab panel.\n * `<a-tab>` should always be used with `role=heading` in the markup so that the semantics remain useable when JavaScript is failing.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab\n * @extends HTMLElement\n *\n * @property {boolean} selected - Whether the tab is selected.\n * @property {boolean} disabled - Whether the tab is disabled.\n * @property {boolean} closable - Whether the tab is closable.\n *\n * @attribute selected - Reflects the selected property.\n * @attribute disabled - Reflects the disabled property.\n * @attribute closable - Reflects the closable property.\n *\n * @csspart base - The component's base wrapper.\n * @csspart close-tab - The close button.\n * @csspart close-tab-icon - The close button icon.\n *\n * @slot - The tab's content.\n *\n * @event a-tab-close - Fires when the tab's close button is clicked.\n */\nclass ATab extends HTMLElement {\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  static get observedAttributes() {\n    return ['selected', 'disabled', 'closable'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'selected' && oldValue !== newValue) {\n      this.setAttribute('aria-selected', this.selected.toString());\n      this.setAttribute('tabindex', this.disabled || !this.selected ? '-1' : '0');\n    }\n\n    if (name === 'disabled' && oldValue !== newValue) {\n      this.setAttribute('aria-disabled', this.disabled.toString());\n      this.setAttribute('tabindex', this.disabled || !this.selected ? '-1' : '0');\n    }\n\n    if (name === 'closable' && oldValue !== newValue) {\n      if (this.closable) {\n        const closeButton = document.createElement('span');\n        closeButton.className = 'tab__close';\n        closeButton.setAttribute('part', 'close-tab');\n        closeButton.innerHTML = /* html */ `<svg part=\"close-tab-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.875em\" height=\"0.875em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/></svg>`;\n        this.shadowRoot?.querySelector('.tab')?.appendChild(closeButton);\n        closeButton.addEventListener('click', this.#handleCloseButtonClick);\n      } else {\n        const closeButton = this.shadowRoot?.querySelector('.tab__close');\n        closeButton?.removeEventListener('click', this.#handleCloseButtonClick);\n        closeButton?.remove();\n      }\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('selected');\n    this.#upgradeProperty('disabled');\n    this.#upgradeProperty('closable');\n\n    if (!this.id) {\n      this.id = uid('tab', (++tabCounter).toString());\n    }\n\n    this.setAttribute('slot', 'tab');\n    this.setAttribute('role', 'tab');\n    this.setAttribute('aria-selected', 'false');\n    this.setAttribute('tabindex', this.disabled || !this.selected ? '-1' : '0');\n  }\n\n  /**\n   * Lifecycle method that is called when the element is disconnected from the DOM.\n   */\n  disconnectedCallback() {\n    const closeButton = this.shadowRoot?.querySelector('.tab__close');\n    closeButton?.removeEventListener('click', this.#handleCloseButtonClick);\n  }\n\n  /**\n   * @type {boolean} - Whether the tab is selected.\n   * @default false\n   * @attribute selected - Reflects the selected property.\n   */\n  get selected() {\n    return this.hasAttribute('selected');\n  }\n\n  set selected(value) {\n    this.toggleAttribute('selected', !!value);\n  }\n\n  /**\n   * @type {boolean} - Whether the tab is disabled.\n   * @default false\n   * @attribute disabled - Reflects the disabled property.\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', !!value);\n  }\n\n  /**\n   * @type {boolean} - Whether the tab is closable.\n   * @default false\n   * @attribute closable - Reflects the closable property.\n   */\n  get closable() {\n    return this.hasAttribute('closable');\n  }\n\n  set closable(value) {\n    this.toggleAttribute('closable', !!value);\n  }\n\n  /**\n   * Handles the click event on the close button.\n   *\n   * @param {Event} evt - The click event.\n   */\n  #handleCloseButtonClick = evt => {\n    evt.stopPropagation();\n\n    this.dispatchEvent(\n      new CustomEvent(`a-tab-close`, {\n        bubbles: true,\n        composed: true,\n        detail: { tabId: this.id }\n      })\n    );\n  };\n\n  /**\n   * Wrapper for the `upgradeProperty` function.\n   *\n   * @param {'selected' | 'disabled' | 'closable'} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    return upgradeProperty(prop, this);\n  }\n\n  static defineCustomElement(elementName = 'a-tab') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ATab);\n    }\n  }\n}\n\nATab.defineCustomElement();\n\nexport { ATab };\n", "// @ts-check\n\nimport { uid } from './utils/uid.js';\n\nlet panelCounter = 0;\n\nconst styles = /* css */ `\n  :host {\n    box-sizing: border-box;\n    display: block;\n    contain: content;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */ `\n  <style>\n    ${styles}\n  </style>\n\n  <div part=\"base\" class=\"tab-panel\">\n    <slot></slot>\n  </div>\n`;\n\n/**\n * @summary This is a panel for a `<a-tab-group>` tab panel.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab-panel\n * @extends HTMLElement\n *\n * @csspart base - The component's base wrapper.\n *\n * @slot - The content of the tab panel.\n */\nclass ATabPanel extends HTMLElement {\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */\n  connectedCallback() {\n    this.setAttribute('slot', 'panel');\n    this.setAttribute('role', 'tabpanel');\n    this.setAttribute('hidden', '');\n\n    if (!this.id) {\n      this.id = uid('panel', (++panelCounter).toString());\n    }\n  }\n\n  static defineCustomElement(elementName = 'a-tab-panel') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ATabPanel);\n    }\n  }\n}\n\nATabPanel.defineCustomElement();\n\nexport { ATabPanel };\n", "// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\n/** @typedef {import('./a-tab').ATab} Tab */\n/** @typedef {import('./a-tab-panel').ATabPanel} TabPanel */\n\nexport { ATab } from './a-tab.js';\nexport { ATabPanel } from './a-tab-panel.js';\nimport { upgradeProperty } from './utils/upgrade-property.js';\n\n/**\n * The default scroll distance in pixels that the\n * tabs will scroll when the scroll buttons are clicked.\n */\nconst DEFAULT_SCROLL_DISTANCE = 200;\n\n/**\n * The available placements for the tabs.\n */\nconst PLACEMENT = {\n  TOP: 'top',\n  BOTTOM: 'bottom',\n  START: 'start',\n  END: 'end'\n};\n\n/**\n * The available directions for the tab group.\n */\nconst DIR = {\n  LTR: 'ltr',\n  RTL: 'rtl'\n};\n\n/**\n * The valid placements for the tabs.\n */\nconst validPlacements = Object.entries(PLACEMENT).map(([, value]) => value);\n\n/**\n * The available activation modes for the tabs.\n */\nconst ACTIVATION = {\n  AUTO: 'auto',\n  MANUAL: 'manual'\n};\n\n/**\n * Defines key codes to help with handling keyboard events.\n */\nconst KEYCODE = {\n  DOWN: 'ArrowDown',\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  HOME: 'Home',\n  END: 'End',\n  ENTER: 'Enter',\n  SPACE: ' '\n};\n\nconst styles = /* css */ `\n  :host {\n    --selected-tab-color: #005fcc;\n    --selected-tab-bg-color: transparent;\n    --tabs-scroll-behavior: smooth;\n    --scroll-button-width: 2.125em;\n    --scroll-button-height: 2.125em;\n    --scroll-button-inline-offset: 0rem;\n\n    box-sizing: border-box;\n    display: block;\n    contain: content;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    :host {\n      --tabs-scroll-behavior: auto;\n    }\n  }\n\n  :host([hidden]),\n  [hidden],\n  ::slotted([hidden]) {\n    display: none !important;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  .tab-group {\n    display: flex;\n    width: 100%;\n  }\n\n  .tab-group__nav {\n    position: relative;\n  }\n\n  .tab-group__nav--has-scroll-controls {\n    padding: 0 calc(var(--scroll-button-width) + var(--scroll-button-inline-offset));\n  }\n\n  .tab-group__scroll-button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: var(--scroll-button-width);\n    height: var(--scroll-button-height);\n    padding: 0; /* Required for iOS, otherwise the svg is not visible: https://stackoverflow.com/questions/66532071/flex-svg-behaving-strange-in-ios-safari-14-0-3 */\n    border: 0;\n    z-index: 1;\n    background-color: transparent;\n    font-size: inherit;\n    cursor: pointer;\n    color: currentColor;\n  }\n\n  .tab-group__scroll-button--start {\n    left: var(--scroll-button-inline-offset);\n  }\n\n  .tab-group__scroll-button--end {\n    right: var(--scroll-button-inline-offset);\n  }\n\n  :host([dir=\"${DIR.RTL}\"]) .tab-group__scroll-button--start {\n    right: var(--scroll-button-inline-offset);\n    left: auto;\n    transform: translateY(-50%) rotate(180deg);\n  }\n\n  :host([dir=\"${DIR.RTL}\"]) .tab-group__scroll-button--end {\n    left: var(--scroll-button-inline-offset);\n    right: auto;\n    transform: translateY(-50%) rotate(180deg);\n  }\n\n  .tab-group__tabs {\n    display: flex;\n    padding: 0.25rem;\n    overflow-x: auto;\n    scroll-behavior: var(--tabs-scroll-behavior);\n    scrollbar-width: none;\n  }\n\n  .tab-group__tabs::-webkit-scrollbar {\n    display: none;\n  }\n\n  .tab-group__panels {\n    padding: 1rem 0;\n  }\n\n  /* placement=\"top\" */\n  .tab-group,\n  :host([placement=\"${PLACEMENT.TOP}\"]) .tab-group {\n    flex-direction: column;\n  }\n\n  /* placement=\"bottom\" */\n  :host([placement=\"${PLACEMENT.BOTTOM}\"]) .tab-group {\n    flex-direction: column;\n  }\n\n  :host([placement=\"${PLACEMENT.BOTTOM}\"]) .tab-group__nav {\n    order: 1;\n  }\n\n  /* placement=\"start\" */\n  :host([placement=\"${PLACEMENT.START}\"]) .tab-group {\n    flex-direction: row;\n  }\n\n  :host([placement=\"${PLACEMENT.START}\"]) .tab-group__tabs {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  :host([placement=\"${PLACEMENT.START}\"]) .tab-group__panels {\n    flex: 1;\n    padding: 0 1rem;\n  }\n\n  /* placement=\"end\" */\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group {\n    flex-direction: row;\n  }\n\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group__nav {\n    order: 1;\n  }\n\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group__tabs {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  :host([placement=\"${PLACEMENT.END}\"]) .tab-group__panels {\n    flex: 1;\n    padding: 0 1rem;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */ `\n  <style>\n    ${styles}\n  </style>\n\n  <div part=\"base\" class=\"tab-group\">\n    <div part=\"nav\" class=\"tab-group__nav\">\n      <button type=\"button\" part=\"scroll-button scroll-button--start\" class=\"tab-group__scroll-button tab-group__scroll-button--start\" aria-label=\"Scroll to start\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" part=\"scroll-button-icon\">\n          <path fill-rule=\"evenodd\" d=\"M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n        </svg>\n      </button>\n\n      <div part=\"tabs\" class=\"tab-group__tabs\" role=\"tablist\" tabindex=\"-1\">\n        <slot name=\"tab\"></slot>\n      </div>\n\n      <button type=\"button\" part=\"scroll-button scroll-button--end\" class=\"tab-group__scroll-button tab-group__scroll-button--end\" aria-label=\"Scroll to end\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" part=\"scroll-button-icon\">\n          <path fill-rule=\"evenodd\" d=\"M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\"/>\n        </svg>\n      </button>\n    </div>\n\n    <div part=\"panels\" class=\"tab-group__panels\">\n      <slot name=\"panel\"></slot>\n    </div>\n  </div>\n`;\n\n/**\n * @summary Container element for tabs and panels. All children of <a-tab-group> should be either `<a-tab>` or `<a-tab-panel>`.\n * @documentation https://github.com/georapbox/a-tab-group\n *\n * @tagname a-tab-group\n * @extends HTMLElement\n *\n * @property {string} placement - The placement of the tabs.\n * @property {boolean} noScrollControls - Whether or not the scroll controls are enabled.\n * @property {number} scrollDistance - The distance in pixels that the tabs will scroll when the scroll buttons are clicked.\n * @property {string} activation - The activation mode of the tabs.\n * @property {boolean} noTabCycling - Whether or not the tabs should cycle when reaching the first or last tab using the keyboard.\n *\n * @attribute placement - Reflects the placement property.\n * @attribute no-scroll-controls - Reflects the noScrollControls property.\n * @attribute scroll-distance - Reflects the scrollDistance property.\n * @attribute activation - Reflects the activation property.\n * @attribute no-tab-cycling - Reflects the noTabCycling property.\n *\n * @slot tab - Used for groupping tabs in the tab group. Must be <a-tab> elements.\n * @slot panel - Used for groupping tab panels in the tab group. Must be <a-tab-panel> elements.\n *\n * @csspart base - The component's base wrapper.\n * @csspart nav - The nav container.\n * @csspart nav--has-scroll-controls - The nav container when the scroll controls are enabled and visible.\n * @csspart scroll-button - The scroll button.\n * @csspart scroll-button--start - The scroll button for scrolling towards the start.\n * @csspart scroll-button--end - The scroll button for scrolling towards the end.\n * @csspart scroll-button-icon - The scroll button icon.\n * @csspart tabs - The tabs container.\n * @csspart panels - The panels container.\n *\n * @cssproperty --selected-tab-color - The color of the selected tab.\n * @cssproperty --selected-tab-bg-color - The background color of the selected tab.\n * @cssproperty --tabs-scroll-behavior - The scroll behavior of the tabs container.\n * @cssproperty --scroll-button-width - The width of the scroll buttons.\n * @cssproperty --scroll-button-height - The height of the scroll buttons.\n * @cssproperty --scroll-button-inline-offset - The inline offset of the scroll buttons.\n *\n * @event a-tab-show - Fired when a tab is shown.\n * @event a-tab-hide - Fired when a tab is shown.\n *\n * @method selectTabByIndex - Selects the tab at the given index.\n * @method selectTabById - Selects the tab with the given id.\n * @method selectTab - Selects the given tab.\n */\nclass ATabGroup extends HTMLElement {\n  /** @type {Nullable<ResizeObserver>} */\n  #resizeObserver = null;\n\n  /** @type {Nullable<number>} */\n  #rafId = null;\n\n  /** @type {boolean} */\n  #hasTabSlotChangedOnce = false;\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  static get observedAttributes() {\n    return ['placement', 'no-scroll-controls'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'placement' && oldValue !== newValue) {\n      this.#syncNav();\n    }\n\n    if (name === 'no-scroll-controls' && oldValue !== newValue) {\n      this.#syncNav();\n    }\n  }\n\n  /**\n   * @type {Nullable<string>} - The placement of the tabs.\n   * @default 'top'\n   * @attribute placement - Reflects the placement property.\n   */\n  get placement() {\n    return this.getAttribute('placement') || PLACEMENT.TOP;\n  }\n\n  set placement(value) {\n    if (value != null) {\n      this.setAttribute('placement', value);\n    }\n  }\n\n  /**\n   * @type {boolean} - Whether or not the scroll controls are enabled.\n   * @default false\n   * @attribute no-scroll-controls - Reflects the noScrollControls property.\n   */\n  get noScrollControls() {\n    return this.hasAttribute('no-scroll-controls');\n  }\n\n  set noScrollControls(value) {\n    this.toggleAttribute('no-scroll-controls', !!value);\n  }\n\n  /**\n   * @type {number} - The distance in pixels that the tabs will scroll when the scroll buttons are clicked.\n   * @default 200\n   * @attribute scroll-distance - Reflects the scrollDistance property.\n   */\n  get scrollDistance() {\n    const value = Number(this.getAttribute('scroll-distance'));\n    return Math.abs(value) || DEFAULT_SCROLL_DISTANCE;\n  }\n\n  set scrollDistance(value) {\n    this.setAttribute('scroll-distance', Math.abs(value).toString() || DEFAULT_SCROLL_DISTANCE.toString());\n  }\n\n  /**\n   * @type {string} - The activation mode of the tabs.\n   * @default 'auto'\n   * @attribute activation - Reflects the activation property.\n   */\n  get activation() {\n    return this.getAttribute('activation') || ACTIVATION.AUTO;\n  }\n\n  set activation(value) {\n    this.setAttribute('activation', value || ACTIVATION.AUTO);\n  }\n\n  /**\n   * @type {boolean} - Whether or not the tabs should cycle when reaching the first or last tab using the keyboard.\n   * @default false\n   * @attribute no-tab-cycling - Reflects the noTabCycling property.\n   */\n  get noTabCycling() {\n    return this.hasAttribute('no-tab-cycling');\n  }\n\n  set noTabCycling(value) {\n    this.toggleAttribute('no-tab-cycling', !!value);\n  }\n\n  /**\n   * Lifecycle method that is called when the element is first connected to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('placement');\n    this.#upgradeProperty('noScrollControls');\n    this.#upgradeProperty('scrollDistance');\n    this.#upgradeProperty('activation');\n    this.#upgradeProperty('noTabCycling');\n\n    const tabSlot = this.shadowRoot?.querySelector('slot[name=tab]');\n    const panelSlot = this.shadowRoot?.querySelector('slot[name=panel]');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n    const navContainer = this.shadowRoot?.querySelector('.tab-group__nav');\n    const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll('.tab-group__scroll-button') || []);\n\n    tabSlot?.addEventListener('slotchange', this.#handleSlotChange);\n    panelSlot?.addEventListener('slotchange', this.#handleSlotChange);\n    tabsContainer?.addEventListener('click', this.#handleTabClick);\n    tabsContainer?.addEventListener('keydown', this.#handleKeyDown);\n    scrollButtons.forEach(el => el.addEventListener('click', this.#handleScrollButtonClick));\n    this.addEventListener('a-tab-close', this.#handleTabClose);\n\n    if ('ResizeObserver' in window) {\n      this.#resizeObserver = new ResizeObserver(entries => {\n        this.#rafId = window.requestAnimationFrame(() => {\n          const entry = entries?.[0];\n          const targetElement = entry?.target;\n          const isElementScrollable = targetElement?.scrollWidth > targetElement?.clientWidth;\n          scrollButtons.forEach(el => el.toggleAttribute('hidden', !isElementScrollable));\n          navContainer?.part.toggle('nav--has-scroll-controls', isElementScrollable);\n          navContainer?.classList.toggle('tab-group__nav--has-scroll-controls', isElementScrollable);\n        });\n      });\n    }\n\n    this.#hideEmptyTabGroup();\n    this.#syncNav();\n\n    // Setting the direction attribute on the host element, to make sure the scroll buttons are positioned correctly.\n    this.#getDirection() === DIR.RTL ? this.setAttribute('dir', DIR.RTL) : this.removeAttribute('dir');\n  }\n\n  /**\n   * Lifecycle method that is called when the element is disconnected from the DOM.\n   */\n  disconnectedCallback() {\n    const tabSlot = this.shadowRoot?.querySelector('slot[name=tab]');\n    const panelSlot = this.shadowRoot?.querySelector('slot[name=panel]');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n    const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll('.tab-group__scroll-button') || []);\n\n    tabSlot?.removeEventListener('slotchange', this.#handleSlotChange);\n    panelSlot?.removeEventListener('slotchange', this.#handleSlotChange);\n    tabsContainer?.removeEventListener('click', this.#handleTabClick);\n    tabsContainer?.removeEventListener('keydown', this.#handleKeyDown);\n    scrollButtons.forEach(el => el.removeEventListener('click', this.#handleScrollButtonClick));\n    this.removeEventListener('a-tab-close', this.#handleTabClose);\n    this.#stopResizeObserver();\n  }\n\n  /**\n   * Starts observing the tabs container for resize events.\n   */\n  #startResizeObserver() {\n    if (!this.#resizeObserver) {\n      return;\n    }\n\n    const scrollElement = this.shadowRoot?.querySelector('.tab-group__tabs');\n\n    if (scrollElement) {\n      this.#resizeObserver.unobserve(scrollElement);\n      this.#resizeObserver.observe(scrollElement);\n    }\n  }\n\n  /**\n   * Stops observing the tabs container for resize events.\n   */\n  #stopResizeObserver() {\n    if (!this.#resizeObserver) {\n      return;\n    }\n\n    this.#resizeObserver.disconnect();\n\n    if (this.#rafId !== null) {\n      window.cancelAnimationFrame(this.#rafId);\n      this.#rafId = null;\n    }\n  }\n\n  /**\n   * Gets the direction of the tab group.\n   *\n   * @returns {'ltr' | 'rtl'} The direction of the tab group.\n   */\n  #getDirection() {\n    return /** @type {'ltr' | 'rtl'} */ (getComputedStyle(this).direction || DIR.LTR);\n  }\n\n  /**\n   * Hides the tab group if there are no tabs.\n   */\n  #hideEmptyTabGroup() {\n    this.hidden = this.#allTabs().length === 0;\n  }\n\n  /**\n   * Links up tabs with their adjacent panels using `aria-controls` and `aria-labelledby`.\n   * This method makes sure only one tab is selected at a time.\n   */\n  #linkPanels() {\n    const tabs = this.#allTabs();\n\n    this.#hideEmptyTabGroup();\n\n    // Give each panel a `aria-labelledby` attribute that refers to the tab that controls it.\n    tabs.forEach(tab => {\n      const panel = tab.nextElementSibling;\n\n      if (!panel || panel.tagName.toLowerCase() !== 'a-tab-panel') {\n        return console.error(`Tab #${tab.id} is not a sibling of a <a-tab-panel>`);\n      }\n\n      tab.setAttribute('aria-controls', panel.id);\n      panel.setAttribute('aria-labelledby', tab.id);\n    });\n  }\n\n  /**\n   * Get all panels in the tab group.\n   *\n   * @returns {TabPanel[]} All the panels in the tab group.\n   */\n  #allPanels() {\n    return Array.from(this.querySelectorAll('a-tab-panel'));\n  }\n\n  /**\n   * Get all tabs in the tab group.\n   *\n   * @returns {Tab[]} All the tabs in the tab group.\n   */\n  #allTabs() {\n    return Array.from(this.querySelectorAll('a-tab'));\n  }\n\n  /**\n   * Get the panel for the given tab.\n   *\n   * @param {Tab} tab - The tab whose panel is to be returned.\n   * @returns {Nullable<TabPanel>} - The panel controlled by the given tab.\n   */\n  #panelForTab(tab) {\n    const panelId = tab.getAttribute('aria-controls');\n    return this.querySelector(`#${panelId}`);\n  }\n\n  /**\n   * Get the first non-disabled tab in the tab group.\n   *\n   * @returns {Nullable<Tab>} The first tab in the tab group.\n   */\n  #firstTab() {\n    const tabs = this.#allTabs();\n    return tabs.find(tab => !tab.disabled) || null;\n  }\n\n  /**\n   * Get the last non-disabled tab in the tab group.\n   *\n   * @returns {Nullable<Tab>} The last tab in the tab group.\n   */\n  #lastTab() {\n    const tabs = this.#allTabs();\n\n    for (let i = tabs.length - 1; i >= 0; i--) {\n      if (!tabs[i].disabled) {\n        return tabs[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the tab that comes before the currently selected one, wrapping around when reaching the first tab.\n   * If the currently selected tab is disabled, the method will skip it.\n   *\n   * @returns {Nullable<Tab>} The previous tab.\n   */\n  #prevTab() {\n    const tabs = this.#allTabs();\n    let newIdx =\n      this.activation === ACTIVATION.MANUAL\n        ? tabs.findIndex(tab => tab.matches(':focus')) - 1\n        : tabs.findIndex(tab => tab.selected) - 1;\n\n    // Keep looping until we find a non-disabled tab.\n    while (tabs[(newIdx + tabs.length) % tabs.length].disabled) {\n      newIdx--;\n    }\n\n    // Stop cycling through tabs if we reach the beginning and tab cycling is disabled.\n    if (this.noTabCycling && newIdx < 0) {\n      return null;\n    }\n\n    // Add `tabs.length` to make sure the index is a positive number and get the modulus to wrap around if necessary.\n    return tabs[(newIdx + tabs.length) % tabs.length];\n  }\n\n  /**\n   * Get the tab that comes after the currently selected one, wrapping around when reaching the last tab.\n   * If the currently selected tab is disabled, the method will skip it.\n   *\n   * @returns {Nullable<Tab>} The next tab.\n   */\n  #nextTab() {\n    const tabs = this.#allTabs();\n    let newIdx =\n      this.activation === ACTIVATION.MANUAL\n        ? tabs.findIndex(tab => tab.matches(':focus')) + 1\n        : tabs.findIndex(tab => tab.selected) + 1;\n\n    // Keep looping until we find a non-disabled tab.\n    while (tabs[newIdx % tabs.length].disabled) {\n      newIdx++;\n    }\n\n    // Stop cycling through tabs if we reach the end and tab cycling is disabled.\n    if (this.noTabCycling && newIdx >= tabs.length) {\n      return null;\n    }\n\n    return tabs[newIdx % tabs.length];\n  }\n\n  /**\n   * Marks all tabs as unselected and hides all the panels.\n   * This is called every time the user selects a new tab.\n   */\n  #reset() {\n    const tabs = this.#allTabs();\n    const panels = this.#allPanels();\n\n    tabs.forEach(tab => (tab.selected = false));\n    panels.forEach(panel => (panel.hidden = true));\n  }\n\n  /**\n   * Syncs the tab group navigation with the current state of the tab group.\n   *\n   * This is called every time the user:\n   * - adds or removes a tab or panel\n   * - changes the placement of the tabs\n   * - enables or disables the scroll controls\n   *\n   * If the tabs container is scrollable and the scroll controls are enabled,\n   * the scroll buttons are displayed and the resize observer is started,\n   * otherwise they are hidden and the resize observer is stopped.\n   */\n  #syncNav() {\n    const navContainer = this.shadowRoot?.querySelector('.tab-group__nav');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n\n    /** @type {HTMLButtonElement[]} */\n    const scrollButtons = Array.from(this.shadowRoot?.querySelectorAll('.tab-group__scroll-button') || []);\n\n    if (this.noScrollControls || this.placement === PLACEMENT.START || this.placement === PLACEMENT.END) {\n      this.#stopResizeObserver();\n      scrollButtons.forEach(el => (el.hidden = true));\n      navContainer?.part.remove('nav--has-scroll-controls');\n      navContainer?.classList.remove('tab-group__nav--has-scroll-controls');\n      tabsContainer?.setAttribute('aria-orientation', 'vertical');\n    } else {\n      this.#startResizeObserver();\n      scrollButtons.forEach(el => (el.hidden = false));\n      tabsContainer?.setAttribute('aria-orientation', 'horizontal');\n    }\n  }\n\n  /**\n   * Sets the selected tab when the slot changes.\n   * This is called every time the user adds or removes a tab or panel.\n   * This is useful when the user closes the selected tab and we need to select a new one.\n   */\n  #setSelectedTabOnSlotChange() {\n    const tabs = this.#allTabs();\n\n    // Get the selected non-disabled tab, or the first non-disabled tab.\n    const tab = tabs.find(tab => tab.selected && !tab.disabled) || tabs.find(tab => !tab.disabled);\n\n    if (tab) {\n      if (this.#hasTabSlotChangedOnce && !tab.selected) {\n        this.dispatchEvent(\n          new CustomEvent('a-tab-show', {\n            bubbles: true,\n            composed: true,\n            detail: { tabId: tab.id }\n          })\n        );\n      }\n\n      this.#setSelectedTab(tab);\n    }\n  }\n\n  /**\n   * Sets the given tab as selected and shows the panel corresponding to the given tab.\n   * Differentiates from `selectTab()` in that it does not emit any events or focus the tab.\n   * Used internally to set the selected tab when a tab is selected by a side effect,\n   * eg. when a tabs and panels are added or removeda and there is a need to select a new tab.\n   *\n   * @param {Tab} tab - The tab to be selected.\n   */\n  #setSelectedTab(tab) {\n    this.#reset();\n\n    if (tab) {\n      tab.selected = true;\n    }\n\n    const panel = this.#panelForTab(tab);\n\n    if (panel) {\n      panel.hidden = false;\n    }\n  }\n\n  /**\n   * Handles the slotchange event on the tab group.\n   * This is called every time the user adds or removes a tab or panel.\n   *\n   * @param {any} evt - The slotchange event.\n   */\n  #handleSlotChange = evt => {\n    this.#linkPanels();\n    this.#syncNav();\n    this.#setSelectedTabOnSlotChange();\n\n    if (evt.target.name === 'tab') {\n      this.#hasTabSlotChangedOnce = true;\n    }\n  };\n\n  /**\n   * Handles key events on the tab group.\n   *\n   * @param {any} evt - The keydown event.\n   */\n  #handleKeyDown = evt => {\n    if (\n      evt.target.tagName.toLowerCase() !== 'a-tab' || // Ignore any key presses that have a modifier.\n      evt.altKey // Don\u2019t handle modifier shortcuts typically used by assistive technology.\n    ) {\n      return;\n    }\n\n    const placement = validPlacements.includes(this.placement || '') ? this.placement : PLACEMENT.TOP;\n    const orientation = [PLACEMENT.TOP, PLACEMENT.BOTTOM].includes(placement || '') ? 'horizontal' : 'vertical';\n    const direction = this.#getDirection();\n    let tab = null;\n\n    switch (evt.key) {\n      case KEYCODE.LEFT:\n        if (orientation === 'horizontal') {\n          tab = direction === DIR.LTR ? this.#prevTab() : this.#nextTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.RIGHT:\n        if (orientation === 'horizontal') {\n          tab = direction === DIR.LTR ? this.#nextTab() : this.#prevTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.UP:\n        if (orientation === 'vertical') {\n          tab = this.#prevTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.DOWN:\n        if (orientation === 'vertical') {\n          tab = this.#nextTab();\n          if (tab) {\n            this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n          }\n        }\n        break;\n      case KEYCODE.HOME:\n        tab = this.#firstTab();\n        if (tab) {\n          this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n        }\n        break;\n      case KEYCODE.END:\n        tab = this.#lastTab();\n        if (tab) {\n          this.activation === ACTIVATION.MANUAL ? tab.focus() : this.selectTab(tab);\n        }\n        break;\n      case KEYCODE.ENTER:\n      case KEYCODE.SPACE:\n        tab = evt.target;\n        if (tab) {\n          this.selectTab(tab);\n        }\n        break;\n      default:\n        // Any other key press is ignored and passed back to the browser.\n        return;\n    }\n\n    // The browser might have some native functionality bound to the arrow keys, home or end.\n    // `preventDefault()` is called to prevent the browser from taking any actions.\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles click events on the tab group.\n   *\n   * @param {any} evt - The click event.\n   */\n  #handleTabClick = evt => {\n    const tab = evt.target.closest('a-tab');\n\n    if (tab) {\n      this.selectTab(tab);\n    }\n  };\n\n  /**\n   * Handles the scroll button click event.\n   *\n   * @param {any} evt - The click event.\n   */\n  #handleScrollButtonClick = evt => {\n    const scrollButton = evt.target.closest('.tab-group__scroll-button');\n    const tabsContainer = this.shadowRoot?.querySelector('.tab-group__tabs');\n\n    if (!scrollButton || !tabsContainer) {\n      return;\n    }\n\n    const isStartButton = scrollButton.classList.contains('tab-group__scroll-button--start');\n    const direction = this.#getDirection();\n    const isLTR = direction === DIR.LTR;\n    const sign = isStartButton ? (isLTR ? -1 : 1) : isLTR ? 1 : -1;\n    const offsetLeft = tabsContainer.scrollLeft;\n\n    tabsContainer.scrollTo({\n      left: offsetLeft + sign * this.scrollDistance\n    });\n  };\n\n  /**\n   * Handles the tab close button click event.\n   *\n   * @param {any} evt - The click event.\n   */\n  #handleTabClose = evt => {\n    const tab = evt.target;\n    const panel = this.#panelForTab(tab);\n\n    if (tab) {\n      tab.remove();\n\n      if (tab.selected) {\n        this.dispatchEvent(\n          new CustomEvent('a-tab-hide', {\n            bubbles: true,\n            composed: true,\n            detail: { tabId: tab.id }\n          })\n        );\n      }\n    }\n\n    if (panel && panel.tagName.toLowerCase() === 'a-tab-panel') {\n      panel.remove();\n    }\n  };\n\n  /**\n   * Wrapper for the `upgradeProperty` function.\n   *\n   * @param {'placement' | 'noScrollControls' | 'scrollDistance' | 'activation' | 'noTabCycling'} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    return upgradeProperty(prop, this);\n  }\n\n  /**\n   * Selects the tab at the given index.\n   * If the tab at the given index is disabled or already selected, this method does nothing.\n   *\n   * @param {number} index - The index of the tab to be selected.\n   */\n  selectTabByIndex(index) {\n    const tabs = this.#allTabs();\n    const tab = tabs[index];\n\n    if (tab) {\n      this.selectTab(tab);\n    }\n  }\n\n  /**\n   * Selects the tab with the given id.\n   * If the tab with the given id is disabled or already selected, this method does nothing.\n   *\n   * @param {string} id - The id of the tab to be selected.\n   */\n  selectTabById(id) {\n    const tabs = this.#allTabs();\n    const tab = tabs.find(tab => tab.id === id);\n\n    if (tab) {\n      this.selectTab(tab);\n    }\n  }\n\n  /**\n   * Selects the given tab.\n   * If the given tab is disabled or already selected, this method does nothing.\n   *\n   * @param {Tab} tab - The tab to be selected.\n   */\n  selectTab(tab) {\n    const oldTab = this.#allTabs().find(t => t.selected);\n\n    if (!tab || tab.disabled || tab.selected || tab.tagName.toLowerCase() !== 'a-tab') {\n      return;\n    }\n\n    this.#setSelectedTab(tab);\n\n    // Queue a microtask to ensure that the tab is focused on the next tick.\n    window.requestAnimationFrame(() => {\n      tab.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n      tab.focus();\n    });\n\n    if (oldTab) {\n      this.dispatchEvent(\n        new CustomEvent('a-tab-hide', {\n          bubbles: true,\n          composed: true,\n          detail: { tabId: oldTab.id }\n        })\n      );\n    }\n\n    this.dispatchEvent(\n      new CustomEvent('a-tab-show', {\n        bubbles: true,\n        composed: true,\n        detail: { tabId: tab.id }\n      })\n    );\n  }\n\n  static defineCustomElement(elementName = 'a-tab-group') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ATabGroup);\n    }\n  }\n}\n\nATabGroup.defineCustomElement();\n\nexport { ATabGroup };\n"],
  "mappings": "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",
  "names": ["uid", "prefix", "suffix", "prefixString", "suffixString", "randomString", "upgradeProperty", "prop", "instance", "value", "tabCounter", "styles", "template", "ATab", "_ATab", "name", "oldValue", "newValue", "closeButton", "#handleCloseButtonClick", "#upgradeProperty", "uid", "value", "evt", "prop", "upgradeProperty", "elementName", "panelCounter", "styles", "template", "ATabPanel", "_ATabPanel", "uid", "elementName", "DEFAULT_SCROLL_DISTANCE", "PLACEMENT", "DIR", "validPlacements", "value", "ACTIVATION", "KEYCODE", "styles", "template", "ATabGroup", "_ATabGroup", "#resizeObserver", "#rafId", "#hasTabSlotChangedOnce", "name", "oldValue", "newValue", "#syncNav", "#upgradeProperty", "tabSlot", "panelSlot", "tabsContainer", "navContainer", "scrollButtons", "#handleSlotChange", "#handleTabClick", "#handleKeyDown", "el", "#handleScrollButtonClick", "#handleTabClose", "entries", "targetElement", "isElementScrollable", "#hideEmptyTabGroup", "#getDirection", "#stopResizeObserver", "#startResizeObserver", "scrollElement", "#allTabs", "#linkPanels", "tabs", "tab", "panel", "#allPanels", "#panelForTab", "panelId", "#firstTab", "#lastTab", "i", "#prevTab", "newIdx", "#nextTab", "#reset", "panels", "#setSelectedTabOnSlotChange", "#setSelectedTab", "evt", "placement", "orientation", "direction", "scrollButton", "isStartButton", "isLTR", "sign", "offsetLeft", "prop", "upgradeProperty", "index", "id", "oldTab", "t", "elementName"]
}
