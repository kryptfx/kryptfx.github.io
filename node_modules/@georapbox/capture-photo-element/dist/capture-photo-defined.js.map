{
  "version": 3,
  "sources": ["../src/utils/clamp.js", "../src/capture-photo.js", "../src/capture-photo-defined.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * Clamps number within the inclusive `min` and `max` bounds,\n * making sure it does not go beyond them on either side.\n * If `min` is greater than `max` the parameters are swapped to support inverted ranges.\n *\n * @param {number} value - The number to clamp.\n * @param {number} lower - The lower bound.\n * @param {number} upper - The upper bound.\n * @throws {TypeError} - If one or more of the arguments passed is not a number.\n * @returns {number} - The clamped number.\n * @example\n *\n * clamp(10, -5, 5);\n * // => 5\n *\n * clamp(-10, -5, 5);\n * // => -5\n *\n * clamp(-15, 0, 100);\n * // => 0\n *\n * clamp(120, 0, 100);\n * // => 100\n *\n * clamp(-5, NaN, 5); // If any of lower or upper bound are `NaN`, they will be converted to `0`.\n * // => 0\n *\n * clamp(120, 100, 0); // The order of lower and upper bounds is reversed (100 > 0)\n * // => 100\n */\nexport const clamp = (value, lower, upper) => {\n  if (Number.isNaN(lower)) {\n    lower = 0;\n  }\n\n  if (Number.isNaN(upper)) {\n    upper = 0;\n  }\n\n  return Math.min(Math.max(value, Math.min(lower, upper)), Math.max(lower, upper));\n};\n", "// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\n/**\n * @typedef {Object} ExtendedMediaTrackCapabilities\n * @property {ULongRange} [width] - The width of the video track.\n * @property {ULongRange} [height] - The height of the video track.\n * @property {ULongRange} [pan] - The pan level of the camera.\n * @property {ULongRange} [tilt] - The tilt level of the camera.\n * @property {ULongRange} [zoom] - The zoom level of the camera.\n * @property {MediaTrackCapabilities} [nativeMediaTrackCapabilities] - The native track capabilities.\n */\n\n/**\n * @typedef {Object} ExtendedMediaTrackConstraints\n * @property {MediaTrackConstraints & {pan: boolean, tilt: boolean, zoom: boolean, torch: boolean}} video - The video constraints.\n * @property {MediaTrackConstraints | boolean} audio - The audio constraints.\n */\n\nimport { clamp } from './utils/clamp.js';\n\nconst COMPONENT_NAME = 'capture-photo';\n\nconst styles = /* css */ `\n  :host {\n    display: block;\n    box-sizing: border-box;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  :host([hidden]),\n  [hidden],\n  ::slotted([hidden]) {\n    display: none;\n  }\n\n  video {\n    display: block;\n  }\n\n  #output:empty {\n    display: none;\n  }\n`;\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */ `\n  <style>${styles}</style>\n\n  <video part=\"video\" playsinline></video>\n\n  <canvas hidden></canvas>\n\n  <div part=\"actions-container\">\n    <slot name=\"capture-button\">\n      <button part=\"capture-button\" type=\"button\">\n        <slot name=\"capture-button-content\">Capture photo</slot>\n      </button>\n    </slot>\n\n    <slot name=\"facing-mode-button\" hidden>\n      <button part=\"facing-mode-button\" type=\"button\">\n        <slot name=\"facing-mode-button-content\">Toggle facing mode</slot>\n      </button>\n    </slot>\n\n    <slot name=\"actions\"></slot>\n  </div>\n\n  <slot></slot>\n\n  <div part=\"output-container\" id=\"output\"></div>\n`;\n\n/**\n * @summary A custom element that implements the MediaDevices.getUserMedia() method of the MediaDevices interface to capture a photo in the browser.\n * @documentation https://github.com/georapbox/capture-photo-element\n *\n * @tagname capture-photo This is the default tag name, unless overridden by the `defineCustomElement` method.\n * @extends HTMLElement\n *\n * @property {boolean} autoPlay - Whether or not to start the video stream automatically.\n * @property {boolean} noImage - Whether or not to show the captured image.\n * @property {string} facingMode - The facing mode of the camera.\n * @property {string} cameraResolution - The resolution of the camera.\n * @property {number} pan - The pan value of the camera.\n * @property {number} tilt - The tilt value of the camera.\n * @property {number} zoom - The zoom value of the camera.\n * @property {boolean} torch - Whether or not the fill light is connected.\n * @property {boolean} loading - Whether or not the video stream is loading.\n * @property {boolean} calculateFileSize - Whether or not to calculate the file size of the captured image.\n *\n * @atttribute {boolean} auto-play - Reflects the autoPlay property.\n * @atttribute {boolean} no-image - Reflects the noImage property.\n * @atttribute {string} facing-mode - Reflects the facingMode property.\n * @atttribute {string} camera-resolution - Reflects the cameraResolution property.\n * @atttribute {number} pan - Reflects the pan property.\n * @atttribute {number} tilt - Reflects the tilt property.\n * @atttribute {number} zoom - Reflects the zoom property.\n * @atttribute {boolean} torch - Reflects the torch property.\n * @atttribute {boolean} loading - Reflects the loading property.\n * @atttribute {boolean} calculate-file-size - Reflects the calculateFileSize property.\n *\n * @slot capture-button - The capture button.\n * @slot capture-button-content - The capture button content.\n * @slot facing-mode-button - The facing mode button.\n * @slot facing-mode-button-content - The facing mode button content.\n * @slot actions - The actions container.\n * @slot - A default un-named slot to add content inside the component.\n *\n * @csspart video - The video element.\n * @csspart actions-container - The actions container.\n * @csspart capture-button - The capture button.\n * @csspart facing-mode-button - The facing mode button.\n * @csspart output-container - The output container.\n * @csspart output-image - The output image.\n *\n * @event capture-photo:video-play - Fires when the video stream is successfully playing.\n * @event capture-photo:success - Fires when the photo is successfully captured.\n * @event capture-photo:error - Fires when an error occurs.\n *\n * @method defineCustomElement - Static method. Defines the custom element with the given name.\n * @method isSupported - Static method. Checks if the MediaDevices.getUserMedia() method is supported.\n * @method startVideoStream - Instance method. Starts the video stream.\n * @method stopVideoStream - Instance method. Stops the video stream.\n * @method capture - Instance method. Captures a photo.\n * @method getSupportedConstraints - Instance method. Gets the supported constraints.\n * @method getTrackCapabilities - Instance method. Gets the track capabilities.\n * @method getTrackSettings - Instance method. Gets the track settings.\n */\nclass CapturePhoto extends HTMLElement {\n  /** @type {MediaTrackSupportedConstraints | {}}*/\n  #supportedConstraints = {};\n\n  /** @type {Nullable<MediaStream>} */\n  #stream = null;\n\n  /** @type {Nullable<HTMLCanvasElement>} */\n  #canvasElement = null;\n\n  /** @type {Nullable<HTMLElement>} */\n  #outputElement = null;\n\n  /** @type {Nullable<HTMLVideoElement>} */\n  #videoElement = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #captureButtonSlot = null;\n\n  /** @type {Nullable<HTMLButtonElement | Element>} */\n  #captureButton = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #facingModeButtonSlot = null;\n\n  /** @type {Nullable<HTMLButtonElement | Element>} */\n  #facingModeButton = null;\n\n  constructor() {\n    super();\n\n    this.#supportedConstraints = this.getSupportedConstraints();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n\n  static get observedAttributes() {\n    return ['no-image', 'facing-mode', 'camera-resolution', 'pan', 'tilt', 'zoom', 'torch'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!this.isConnected) {\n      return;\n    }\n\n    /** @type {ExtendedMediaTrackCapabilities} */\n    const trackCapabilities = this.getTrackCapabilities();\n    const trackSettings = this.getTrackSettings();\n\n    if (name === 'no-image' && oldValue !== newValue) {\n      this.#emptyOutputElement();\n    }\n\n    if (name === 'facing-mode' && oldValue !== newValue && 'facingMode' in this.#supportedConstraints) {\n      const isValidFacingMode = ['user', 'environment'].includes(this.facingMode || '');\n\n      if ('facingMode' in trackSettings && isValidFacingMode) {\n        this.#restartVideoStream();\n      }\n    }\n\n    if (name === 'camera-resolution' && oldValue !== newValue) {\n      if (typeof this.cameraResolution === 'string' && this.cameraResolution.trim().length > 0) {\n        const [width = 0, height = 0] = this.cameraResolution.split('x').map(x => Number(x));\n\n        if (width > 0 && height > 0 && 'width' in trackCapabilities && 'height' in trackCapabilities) {\n          const widthInAllowedRange =\n            trackCapabilities.width?.min && trackCapabilities.width?.max\n              ? width >= trackCapabilities?.width?.min && width <= trackCapabilities?.width?.max\n              : false;\n\n          const heightInAllowedRange =\n            trackCapabilities.height?.min && trackCapabilities.height?.max\n              ? height >= trackCapabilities?.height?.min && height <= trackCapabilities?.height?.max\n              : false;\n\n          if ('width' in trackSettings && 'height' in trackSettings && widthInAllowedRange && heightInAllowedRange) {\n            this.#restartVideoStream();\n          }\n        }\n      }\n    }\n\n    if (name === 'pan' && oldValue !== newValue && 'pan' in this.#supportedConstraints) {\n      const panInAllowedRange =\n        'pan' in trackCapabilities && trackCapabilities.pan?.min && trackCapabilities.pan?.max\n          ? this.pan >= trackCapabilities.pan.min && this.pan <= trackCapabilities.pan.max\n          : false;\n\n      if (typeof this.pan === 'number' && panInAllowedRange) {\n        this.#applyConstraint('pan', this.pan);\n      }\n    }\n\n    if (name === 'tilt' && oldValue !== newValue && 'tilt' in this.#supportedConstraints) {\n      const tiltInAllowedRange =\n        'tilt' in trackCapabilities && trackCapabilities.tilt?.min && trackCapabilities.tilt?.max\n          ? this.tilt >= trackCapabilities.tilt.min && this.tilt <= trackCapabilities.tilt.max\n          : false;\n\n      if (typeof this.tilt === 'number' && tiltInAllowedRange) {\n        this.#applyConstraint('tilt', this.tilt);\n      }\n    }\n\n    if (name === 'zoom' && oldValue !== newValue && 'zoom' in this.#supportedConstraints) {\n      const zoomInAllowedRange =\n        'zoom' in trackCapabilities && trackCapabilities.zoom?.min && trackCapabilities.zoom?.max\n          ? this.zoom >= trackCapabilities.zoom.min && this.zoom <= trackCapabilities.zoom.max\n          : false;\n\n      if (typeof this.zoom === 'number' && zoomInAllowedRange) {\n        this.#applyConstraint('zoom', this.zoom);\n      }\n    }\n\n    if (name === 'torch' && oldValue !== newValue && 'torch' in this.#supportedConstraints) {\n      this.#applyConstraint('torch', this.torch);\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('autpoPlay');\n    this.#upgradeProperty('noImage');\n    this.#upgradeProperty('facingMode');\n    this.#upgradeProperty('cameraResolution');\n    this.#upgradeProperty('pan');\n    this.#upgradeProperty('tilt');\n    this.#upgradeProperty('zoom');\n    this.#upgradeProperty('torch');\n    this.#upgradeProperty('calculateFileSize');\n\n    this.#canvasElement = this.shadowRoot?.querySelector('canvas') || null;\n    this.#outputElement = this.shadowRoot?.getElementById('output') || null;\n    this.#videoElement = this.shadowRoot?.querySelector('video') || null;\n    this.#captureButtonSlot = this.shadowRoot?.querySelector('slot[name=\"capture-button\"]') || null;\n    this.#captureButton = this.#getCaptureButton();\n    this.#facingModeButtonSlot = this.shadowRoot?.querySelector('slot[name=\"facing-mode-button\"]') || null;\n    this.#facingModeButton = this.#getFacingModeButton();\n\n    this.#videoElement?.addEventListener('loadedmetadata', this.#onVideoLoadedMetaData);\n    this.#captureButtonSlot?.addEventListener('slotchange', this.#onCaptureButtonSlotChange);\n    this.#captureButton?.addEventListener('click', this.#onCapturePhotoButtonClick);\n    this.#facingModeButtonSlot?.addEventListener('slotchange', this.#onFacingModeButtonSlotChange);\n    this.#facingModeButton?.addEventListener('click', this.#onFacingModeButtonClick);\n\n    if (!CapturePhoto.isSupported()) {\n      return this.dispatchEvent(\n        new CustomEvent(`${COMPONENT_NAME}:error`, {\n          bubbles: true,\n          composed: true,\n          detail: {\n            error: {\n              name: 'NotSupportedError',\n              message: 'Not supported'\n            }\n          }\n        })\n      );\n    }\n\n    if (this.autoPlay) {\n      this.startVideoStream();\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */\n  disconnectedCallback() {\n    this.stopVideoStream();\n    this.#facingModeButton?.removeEventListener('click', this.#onFacingModeButtonClick);\n    this.#captureButton?.removeEventListener('click', this.#onCapturePhotoButtonClick);\n    this.#videoElement?.removeEventListener('canplay', this.#onVideoLoadedMetaData);\n    this.#captureButtonSlot?.removeEventListener('slotchange', this.#onCaptureButtonSlotChange);\n    this.#facingModeButtonSlot?.removeEventListener('slotchange', this.#onFacingModeButtonSlotChange);\n  }\n\n  /**\n   * @type {boolean} autoPlay - Whether or not to start the video stream automatically.\n   * @attribute auto-play - Reflects the autoPlay attribute.\n   */\n  get autoPlay() {\n    return this.hasAttribute('auto-play');\n  }\n\n  set autoPlay(value) {\n    this.toggleAttribute('auto-play', !!value);\n  }\n\n  /**\n   * @type {boolean} noImage - Whether or not to show the captured image.\n   * @attribute no-image - Reflects the noImage attribute.\n   */\n  get noImage() {\n    return this.hasAttribute('no-image');\n  }\n\n  set noImage(value) {\n    this.toggleAttribute('no-image', !!value);\n  }\n\n  /**\n   * @type {string} facingMode - The facing mode of the camera.\n   * @attribute facing-mode - Reflects the facingMode attribute.\n   */\n  get facingMode() {\n    return this.getAttribute('facing-mode') || 'user';\n  }\n\n  set facingMode(value) {\n    this.setAttribute('facing-mode', value);\n  }\n\n  /**\n   * @type {string} cameraResolution - The resolution of the camera.\n   * @attribute camera-resolution - Reflects the cameraResolution attribute.\n   */\n  get cameraResolution() {\n    return this.getAttribute('camera-resolution') || '';\n  }\n\n  set cameraResolution(value) {\n    this.setAttribute('camera-resolution', value);\n  }\n\n  /**\n   * @type {number} pan - The pan value of the camera.\n   * @attribute pan - Reflects the pan attribute.\n   */\n  get pan() {\n    return Number(this.getAttribute('pan')) || 0;\n  }\n\n  set pan(value) {\n    this.setAttribute('pan', value != null ? value.toString() : value);\n  }\n\n  /**\n   * @type {number} tilt - The tilt value of the camera.\n   * @attribute tilt - Reflects the tilt attribute.\n   */\n  get tilt() {\n    return Number(this.getAttribute('tilt')) || 0;\n  }\n\n  set tilt(value) {\n    this.setAttribute('tilt', value != null ? value.toString() : value);\n  }\n\n  /**\n   * @type {number} zoom - The zoom value of the camera.\n   * @attribute zoom - Reflects the zoom attribute.\n   */\n  get zoom() {\n    return Number(this.getAttribute('zoom')) || 1;\n  }\n\n  set zoom(value) {\n    this.setAttribute('zoom', value != null ? value.toString() : value);\n  }\n\n  /**\n   * @type {boolean} torch - Whether or not the fill light is connected.\n   * @attribute torch - Reflects the torch attribute.\n   */\n  get torch() {\n    return this.hasAttribute('torch');\n  }\n\n  set torch(value) {\n    this.toggleAttribute('torch', !!value);\n  }\n\n  /**\n   * @type {boolean} loading - Whether or not the video stream is loading.\n   * @attribute loading - Reflects the loading attribute.\n   */\n  get loading() {\n    return this.hasAttribute('loading');\n  }\n\n  /**\n   * @type {boolean} calculateFileSize - Whether or not to calculate the file size of the captured image.\n   * @attribute calculate-file-size - Reflects the calculateFileSize attribute.\n   */\n  get calculateFileSize() {\n    return this.hasAttribute('calculate-file-size');\n  }\n\n  set calculateFileSize(value) {\n    this.toggleAttribute('calculate-file-size', !!value);\n  }\n\n  /**\n   * Handles the click event of the facing mode button.\n   *\n   * @param {*} evt - The click event.\n   */\n  #onFacingModeButtonClick = evt => {\n    evt.preventDefault();\n\n    if (this.loading) {\n      return;\n    }\n\n    this.facingMode = this.facingMode === 'user' || !this.facingMode ? 'environment' : 'user';\n  };\n\n  /**\n   * Handles the click event of the capture button.\n   *\n   * @param {*} evt - The click event.\n   */\n  #onCapturePhotoButtonClick = evt => {\n    evt.preventDefault();\n    this.capture();\n  };\n\n  /**\n   * Handles the loadedmetadata event of the video element.\n   *\n   * @param {*} evt - The loadedmetadata event.\n   */\n  #onVideoLoadedMetaData = evt => {\n    const video = evt.target;\n\n    video\n      .play()\n      .then(() => {\n        this.dispatchEvent(\n          new CustomEvent(`${COMPONENT_NAME}:video-play`, {\n            bubbles: true,\n            composed: true,\n            detail: { video }\n          })\n        );\n      })\n      .catch(\n        /** @param {Error} error */ error => {\n          this.dispatchEvent(\n            new CustomEvent(`${COMPONENT_NAME}:error`, {\n              bubbles: true,\n              composed: true,\n              detail: { error }\n            })\n          );\n        }\n      )\n      .finally(() => {\n        this.removeAttribute('loading');\n      });\n  };\n\n  /**\n   * Removes all child nodes from the output element.\n   */\n  #emptyOutputElement() {\n    if (!this.#outputElement) {\n      return;\n    }\n\n    Array.from(this.#outputElement.childNodes).forEach(node => node.remove());\n  }\n\n  /**\n   * Applies a constraint to the video track.\n   *\n   * @param {string} constraint - The name of the constraint.\n   * @param {any} value - The value of the constraint.\n   */\n  #applyConstraint(constraint, value) {\n    if (!this.#stream) {\n      return;\n    }\n\n    const [track] = this.#stream.getVideoTracks();\n    /** @type {ExtendedMediaTrackCapabilities} */\n    const trackCapabilities = this.getTrackCapabilities();\n    const trackSettings = this.getTrackSettings();\n\n    const constraintValue =\n      constraint === 'pan' || constraint === 'tilt' || constraint === 'zoom'\n        ? clamp(Number(value), trackCapabilities[constraint]?.min || 1, trackCapabilities[constraint]?.max || 1)\n        : value;\n\n    if (constraint in trackSettings) {\n      track\n        .applyConstraints({\n          advanced: [{ [constraint]: constraintValue }]\n        })\n        .catch(() => {\n          // Fail silently...\n        });\n    }\n  }\n\n  /**\n   * Handles the slotchange event of the capture button slot.\n   *\n   * @param {*} evt - The slotchange event.\n   */\n  #onCaptureButtonSlotChange = evt => {\n    if (evt.target?.name === 'capture-button') {\n      this.#captureButton?.removeEventListener('click', this.#onCapturePhotoButtonClick);\n      this.#captureButton = this.#getCaptureButton();\n\n      if (this.#captureButton) {\n        this.#captureButton.addEventListener('click', this.#onCapturePhotoButtonClick);\n\n        if (this.#captureButton.nodeName !== 'BUTTON' && !this.#captureButton.hasAttribute('role')) {\n          this.#captureButton.setAttribute('role', 'button');\n        }\n      }\n    }\n  };\n\n  /**\n   * Handles the slotchange event of the facing mode button slot.\n   *\n   * @param {*} evt - The slotchange event.\n   */\n  #onFacingModeButtonSlotChange = evt => {\n    if (evt.target?.name === 'facing-mode-button') {\n      this.#facingModeButton?.removeEventListener('click', this.#onFacingModeButtonClick);\n      this.#facingModeButton = this.#getFacingModeButton();\n\n      if (this.#facingModeButton) {\n        this.#facingModeButton.addEventListener('click', this.#onFacingModeButtonClick);\n\n        if (this.#facingModeButton.nodeName !== 'BUTTON' && !this.#facingModeButton.hasAttribute('role')) {\n          this.#facingModeButton.setAttribute('role', 'button');\n        }\n      }\n    }\n  };\n\n  /**\n   * Returns the facing mode button.\n   *\n   * @returns {Nullable<HTMLButtonElement | Element>}\n   */\n  #getFacingModeButton() {\n    if (!this.#facingModeButtonSlot) {\n      return null;\n    }\n\n    return (\n      this.#facingModeButtonSlot.assignedElements({ flatten: true }).find(el => {\n        return el.nodeName === 'BUTTON' || el.getAttribute('slot') === 'facing-mode-button';\n      }) || null\n    );\n  }\n\n  /**\n   * Returns the capture button.\n   *\n   * @returns {Nullable<HTMLButtonElement | Element>}\n   */\n  #getCaptureButton() {\n    if (!this.#captureButtonSlot) {\n      return null;\n    }\n\n    return (\n      this.#captureButtonSlot.assignedElements({ flatten: true }).find(el => {\n        return el.nodeName === 'BUTTON' || el.getAttribute('slot') === 'capture-button';\n      }) || null\n    );\n  }\n\n  /**\n   * Restarts the video stream.\n   */\n  #restartVideoStream() {\n    this.stopVideoStream();\n    this.startVideoStream();\n  }\n\n  /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and\n   * set a value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would\n   * miss that property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {'autpoPlay' | 'noImage' | 'facingMode' | 'cameraResolution' | 'pan' | 'tilt' | 'zoom' | 'calculateFileSize' | 'torch'} prop\n   */\n  #upgradeProperty(prop) {\n    /** @type {any} */\n    const instance = this;\n\n    if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n      const value = instance[prop];\n      delete instance[prop];\n      instance[prop] = value;\n    }\n  }\n\n  /**\n   * Starts the video stream.\n   *\n   * @returns Promise<void>\n   */\n  async startVideoStream() {\n    if (!CapturePhoto.isSupported() || this.#stream) {\n      return;\n    }\n\n    this.setAttribute('loading', '');\n\n    /** @type {ExtendedMediaTrackConstraints} */\n    const constraints = {\n      video: {\n        facingMode: {\n          ideal: this.facingMode || 'user'\n        },\n        pan: true,\n        tilt: true,\n        zoom: true,\n        torch: this.torch\n      },\n      audio: false\n    };\n\n    if (typeof this.cameraResolution === 'string' && this.cameraResolution.trim().length > 0) {\n      const [width = 0, height = 0] = this.cameraResolution.split('x').map(x => Number(x));\n\n      if (width > 0 && height > 0) {\n        constraints.video.width = width;\n        constraints.video.height = height;\n      }\n    }\n\n    try {\n      this.#stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      if (this.#videoElement) {\n        this.#videoElement.srcObject = this.#stream;\n      }\n\n      this.#applyConstraint('pan', this.pan);\n      this.#applyConstraint('tilt', this.tilt);\n      this.#applyConstraint('zoom', this.zoom);\n\n      const trackSettings = this.getTrackSettings();\n\n      if ('facingMode' in trackSettings && this.#facingModeButtonSlot) {\n        this.#facingModeButtonSlot.hidden = false;\n      }\n    } catch (error) {\n      this.dispatchEvent(\n        new CustomEvent(`${COMPONENT_NAME}:error`, {\n          bubbles: true,\n          composed: true,\n          detail: { error }\n        })\n      );\n    } finally {\n      this.removeAttribute('loading');\n    }\n  }\n\n  /**\n   * Stops the video stream.\n   */\n  stopVideoStream() {\n    if (!this.#videoElement || !this.#stream) {\n      return;\n    }\n\n    const [track] = this.#stream.getVideoTracks();\n\n    track?.stop();\n    this.#videoElement.srcObject = null;\n    this.#stream = null;\n  }\n\n  /**\n   * Captures a photo using the element's properties.\n   *\n   * @returns Promise<void>\n   */\n  async capture() {\n    if (this.loading || !this.#canvasElement || !this.#videoElement) {\n      return;\n    }\n\n    try {\n      const ctx = this.#canvasElement.getContext('2d');\n      const width = this.#videoElement.videoWidth;\n      const height = this.#videoElement.videoHeight;\n      this.#canvasElement.width = width;\n      this.#canvasElement.height = height;\n      ctx?.drawImage(this.#videoElement, 0, 0, width, height);\n      const dataURI = this.#canvasElement.toDataURL('image/png');\n\n      if (typeof dataURI === 'string' && dataURI.includes('data:image')) {\n        if (!this.noImage) {\n          const image = new Image();\n          image.src = dataURI;\n          image.width = width;\n          image.height = height;\n          image.alt = 'Captured photo';\n          image.setAttribute('part', 'output-image');\n          this.#emptyOutputElement();\n          this.#outputElement?.appendChild(image);\n        }\n\n        /** @type {{ dataURI: string, width: number, height: number, size?: number }} */\n        const eventDetail = { dataURI, width, height };\n\n        if (this.calculateFileSize) {\n          try {\n            const file = await fetch(dataURI);\n            const blob = await file.blob();\n            const size = blob.size;\n\n            if (size) {\n              eventDetail.size = size;\n            }\n          } catch {\n            // Fail silently...\n          }\n        }\n\n        this.dispatchEvent(\n          new CustomEvent(`${COMPONENT_NAME}:success`, {\n            bubbles: true,\n            composed: true,\n            detail: eventDetail\n          })\n        );\n      }\n    } catch (error) {\n      this.dispatchEvent(\n        new CustomEvent(`${COMPONENT_NAME}:error`, {\n          bubbles: true,\n          composed: true,\n          detail: { error }\n        })\n      );\n    }\n  }\n\n  /**\n   * Returns an object based on the `MediaTrackSupportedConstraints` dictionary,\n   * whose member fields each specify one ofthe constrainable properties the user agent understands.\n   *\n   * @see https://developer.mozilla.org/docs/Web/API/MediaDevices/getSupportedConstraints\n   * @returns {MediaTrackSupportedConstraints | {}}\n   */\n  getSupportedConstraints() {\n    if (!CapturePhoto.isSupported()) {\n      return {};\n    }\n\n    return navigator.mediaDevices.getSupportedConstraints() || {};\n  }\n\n  /**\n   * Returns a `MediaTrackCapabilities` object which specifies the values or range of values\n   * which each constrainable property, based upon the platform and user agent.\n   *\n   * @see https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getCapabilities\n   * @returns {MediaTrackCapabilities | {}}\n   */\n  getTrackCapabilities() {\n    if (!this.#stream) {\n      return {};\n    }\n\n    const [track] = this.#stream.getVideoTracks();\n\n    if (track && typeof track.getCapabilities === 'function') {\n      return track.getCapabilities() || {};\n    }\n\n    return {};\n  }\n\n  /**\n   * Returns a `MediaTrackSettings` object containing the current values of each of\n   * the constrainable properties for the current MediaStreamTrack.\n   *\n   * @see https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getSettings\n   * @returns {MediaTrackSettings | {}}\n   */\n  getTrackSettings() {\n    if (!this.#stream) {\n      return {};\n    }\n\n    const [track] = this.#stream.getVideoTracks();\n\n    if (track && typeof track.getSettings === 'function') {\n      return track.getSettings() || {};\n    }\n\n    return {};\n  }\n\n  /**\n   * Checks if the `MediaDevices.getUserMedia()` method is supported.\n   *\n   * @returns {boolean}\n   */\n  static isSupported() {\n    return Boolean(navigator.mediaDevices?.getUserMedia);\n  }\n\n  /**\n   * Defines a custom element with the given name.\n   * The name must contain a dash (-).\n   *\n   * @param {string} [elementName='capture-photo'] - The name of the custom element.\n   * @example\n   *\n   * CapturePhoto.defineCustomElement('my-capture-photo');\n   */\n  static defineCustomElement(elementName = COMPONENT_NAME) {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, CapturePhoto);\n    }\n  }\n}\n\nexport { CapturePhoto };\n", "import { CapturePhoto } from './capture-photo.js';\n\nCapturePhoto.defineCustomElement();\n\nexport { CapturePhoto };\n"],
  "mappings": "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",
  "names": ["clamp", "value", "lower", "upper", "COMPONENT_NAME", "styles", "template", "CapturePhoto", "_CapturePhoto", "#supportedConstraints", "#stream", "#canvasElement", "#outputElement", "#videoElement", "#captureButtonSlot", "#captureButton", "#facingModeButtonSlot", "#facingModeButton", "name", "oldValue", "newValue", "trackCapabilities", "trackSettings", "#emptyOutputElement", "isValidFacingMode", "#restartVideoStream", "width", "height", "x", "widthInAllowedRange", "heightInAllowedRange", "panInAllowedRange", "#applyConstraint", "tiltInAllowedRange", "zoomInAllowedRange", "#upgradeProperty", "#getCaptureButton", "#getFacingModeButton", "#onVideoLoadedMetaData", "#onCaptureButtonSlotChange", "#onCapturePhotoButtonClick", "#onFacingModeButtonSlotChange", "#onFacingModeButtonClick", "value", "evt", "video", "error", "node", "constraint", "track", "constraintValue", "clamp", "el", "prop", "instance", "constraints", "ctx", "dataURI", "image", "eventDetail", "size", "elementName", "CapturePhoto"]
}
