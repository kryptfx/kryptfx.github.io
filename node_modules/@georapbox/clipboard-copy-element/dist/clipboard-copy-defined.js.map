{
  "version": 3,
  "sources": ["../src/clipboard-copy.js", "../src/clipboard-copy-defined.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\nconst COMPONENT_NAME = 'clipboard-copy';\nconst DEFAULT_FEEDBACK_DURATION = 1000;\nconst SUCCESS_STATUS = 'success';\nconst ERROR_STATUS = 'error';\nconst template = document.createElement('template');\n\nconst styles = /* css */ `\n  :host([hidden]),\n  [hidden],\n  ::slotted([hidden]) {\n    display: none !important;\n  }\n`;\n\ntemplate.innerHTML = /* html */ `\n  <style>${styles}</style>\n  <button type=\"button\" part=\"button\">\n    <slot name=\"copy\">Copy</slot>\n    <slot name=\"success\" hidden>Copied!</slot>\n    <slot name=\"error\" hidden>Error</slot>\n  </button>\n`;\n\n/**\n * @summary A custom element for copying text to the clipboard.\n * @documentation https://github.com/georapbox/clipboard-copy-element#readme\n *\n * @tagname clipboard-copy - This is the default tag name, unless overridden by the `defineCustomElement` method.\n * @extends HTMLElement\n *\n * @property {string} value - The value to be copied to clipboard.\n * @property {string} from - The CSS selector of the element to copy from.\n * @property {boolean} disabled - Whether the copy to clipboard button is disabled.\n * @property {number} feedbackDuration - The duration for displaying the success or error status.\n *\n * @attribute {string} value - Reflects the value property.\n * @attribute {string} from - Reflects the from property.\n * @attribute {boolean} disabled - Reflects the disabled property.\n * @attribute {number} feedback-duration - Reflects the feedbackDuration property.\n *\n * @slot copy - The default slot for the copy button.\n * @slot success - The slot for the success status message.\n * @slot error - The slot for the error status message.\n *\n * @csspart button - The button element.\n * @csspart button--success - The button element when the copy operation is successful.\n * @csspart button--error - The button element when the copy operation fails.\n * @csspart button--disabled - The button element when the disabled attribute is set.\n *\n * @fires clipboard-copy-success - Dispatched when the copy operation is successful.\n * @fires clipboard-copy-error - Dispatched when the copy operation fails.\n *\n * @method defineCustomElement - Static method. Defines a custom element with the given name.\n */\nclass ClipboardCopy extends HTMLElement {\n  /** @type {ReturnType<typeof setTimeout> | undefined} */\n  #timeout = void 0;\n\n  /** @type {Nullable<HTMLButtonElement>} */\n  #buttonEl = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #copySlot = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #successSlot = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #errorSlot = null;\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    if (this.shadowRoot) {\n      this.#buttonEl = this.shadowRoot.querySelector('button');\n      this.#copySlot = this.shadowRoot.querySelector('slot[name=\"copy\"]');\n      this.#successSlot = this.shadowRoot.querySelector('slot[name=\"success\"]');\n      this.#errorSlot = this.shadowRoot.querySelector('slot[name=\"error\"]');\n    }\n  }\n\n  static get observedAttributes() {\n    return ['disabled'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'disabled' && oldValue !== newValue) {\n      if (this.#buttonEl) {\n        this.#buttonEl.disabled = this.disabled;\n        this.#buttonEl.setAttribute('aria-disabled', this.disabled.toString());\n\n        if (this.#buttonEl.part.contains('button')) {\n          this.#buttonEl.part.toggle('button--disabled', this.disabled);\n        }\n      }\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('value');\n    this.#upgradeProperty('from');\n    this.#upgradeProperty('disabled');\n    this.#upgradeProperty('feedbackDuration');\n\n    this.#buttonEl?.addEventListener('click', this.#handleClick);\n  }\n\n  /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */\n  disconnectedCallback() {\n    this.#buttonEl?.removeEventListener('click', this.#handleClick);\n\n    // `disconnectedCallback` is also called when the element is moved to a different document,\n    // via `Document: adoptNode()` method, therefore we reset the component to its initial state.\n    this.#forceResetStatus();\n  }\n\n  /**\n   * The value to be copied to clipboard.\n   *\n   * @type {string}\n   * @attribute value - Reflects the value property.\n   */\n  get value() {\n    return this.getAttribute('value') || '';\n  }\n\n  set value(value) {\n    this.setAttribute('value', value != null ? value.toString() : value);\n  }\n\n  /**\n   * The CSS selector of the element to copy from.\n   *\n   * @type {string}\n   * @attribute from - Reflects the from property.\n   */\n  get from() {\n    return this.getAttribute('from') || '';\n  }\n\n  set from(value) {\n    this.setAttribute('from', value != null ? value.toString() : value);\n  }\n\n  /**\n   * Whether the copy to clipboard button is disabled.\n   *\n   * @type {boolean}\n   * @attribute disabled - Reflects the disabled property.\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', !!value);\n  }\n\n  /**\n   * The duration for displaying the success or error status.\n   *\n   * @type {number}\n   * @attribute feedback-duration - Reflects the feedbackDuration property.\n   */\n  get feedbackDuration() {\n    return Number(this.getAttribute('feedback-duration')) || DEFAULT_FEEDBACK_DURATION;\n  }\n\n  set feedbackDuration(value) {\n    this.setAttribute('feedback-duration', value != null ? value.toString() : value);\n  }\n\n  /**\n   * Copies the value to the clipboard and handles success or error states.\n   */\n  async #copy() {\n    if (!this.value && !this.from) {\n      return;\n    }\n\n    try {\n      let copyValue = '';\n\n      if (this.value) {\n        copyValue = this.value;\n      } else if (this.from) {\n        const root =\n          'getRootNode' in Element.prototype\n            ? this.#buttonEl?.getRootNode({ composed: true })\n            : this.#buttonEl?.ownerDocument;\n\n        if (!root || !(root instanceof Document || root instanceof ShadowRoot)) {\n          return;\n        }\n\n        const element = root.querySelector(this.from);\n\n        if (!element) {\n          return;\n        }\n\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n          copyValue = element.value;\n        } else if (element instanceof HTMLAnchorElement && element.hasAttribute('href')) {\n          copyValue = element.href;\n        } else {\n          copyValue = element.textContent || '';\n        }\n      }\n\n      await navigator.clipboard.writeText(copyValue);\n\n      this.#showStatus(SUCCESS_STATUS);\n\n      this.dispatchEvent(\n        new CustomEvent(`${COMPONENT_NAME}-success`, {\n          bubbles: true,\n          composed: true,\n          detail: { value: copyValue }\n        })\n      );\n    } catch (error) {\n      this.#showStatus(ERROR_STATUS);\n\n      this.dispatchEvent(\n        new CustomEvent(`${COMPONENT_NAME}-error`, {\n          bubbles: true,\n          composed: true,\n          detail: { error }\n        })\n      );\n    }\n  }\n\n  /**\n   * Handles the button click event.\n   *\n   * @param {MouseEvent} evt - The click event.\n   */\n  #handleClick = evt => {\n    evt.preventDefault();\n\n    if (this.disabled || this.#timeout) {\n      return;\n    }\n\n    this.#copy();\n  };\n\n  /**\n   * Displays the success or error status.\n   *\n   * @param {string} status - The status to display.\n   */\n  #showStatus(status) {\n    if (this.#copySlot) {\n      this.#copySlot.hidden = true;\n    }\n\n    if (this.#successSlot) {\n      this.#successSlot.hidden = status !== SUCCESS_STATUS;\n    }\n\n    if (this.#errorSlot) {\n      this.#errorSlot.hidden = status !== ERROR_STATUS;\n    }\n\n    this.#buttonEl?.part.remove('button--success');\n    this.#buttonEl?.part.remove('button--error');\n    this.#buttonEl?.part.add(`button--${status}`);\n\n    this.#timeout && clearTimeout(this.#timeout);\n\n    this.#timeout = setTimeout(() => {\n      if (this.#copySlot) {\n        this.#copySlot.hidden = false;\n      }\n\n      if (this.#successSlot) {\n        this.#successSlot.hidden = true;\n      }\n\n      if (this.#errorSlot) {\n        this.#errorSlot.hidden = true;\n      }\n\n      this.#buttonEl?.part.remove(`button--${status}`);\n\n      this.#timeout = void 0;\n    }, this.feedbackDuration);\n  }\n\n  /**\n   * Resets the status to the initial state.\n   * Clears the feedback timeout, hides the success or error slots and shows the copy slot.\n   */\n  #forceResetStatus() {\n    this.#timeout && clearTimeout(this.#timeout);\n    this.#timeout = void 0;\n\n    if (this.#copySlot) {\n      this.#copySlot.hidden = false;\n    }\n\n    if (this.#successSlot) {\n      this.#successSlot.hidden = true;\n    }\n\n    if (this.#errorSlot) {\n      this.#errorSlot.hidden = true;\n    }\n\n    this.#buttonEl?.part.remove('button--success');\n    this.#buttonEl?.part.remove('button--error');\n  }\n\n  /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {'value' | 'from' | 'disabled' | 'feedbackDuration'} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    /** @type {any} */\n    const instance = this;\n\n    if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n      const value = instance[prop];\n      delete instance[prop];\n      instance[prop] = value;\n    }\n  }\n\n  /**\n   * Defines a custom element with the given name.\n   * The name must contain a dash (-).\n   *\n   * @param {string} [elementName='clipboard-copy'] - The name of the custom element.\n   * @example\n   *\n   * ClipboardCopy.defineCustomElement('my-clipboard-copy');\n   */\n  static defineCustomElement(elementName = COMPONENT_NAME) {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ClipboardCopy);\n    }\n  }\n}\n\nexport { ClipboardCopy };\n", "import { ClipboardCopy } from './clipboard-copy.js';\n\nClipboardCopy.defineCustomElement();\n\nexport { ClipboardCopy };\n"],
  "mappings": ";;;;;;;;;AASA,IAAMA,EAAiB,iBAEvB,IAAMC,EAAiB,UACjBC,EAAe,QACfC,EAAW,SAAS,cAAc,UAAU,EAE5CC,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQzBD,EAAS,UAAuB;AAAA,WACrBC,CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuCjB,IAAMC,EAAN,MAAMC,UAAsB,WAAY,CAEtCC,GAAW,OAGXC,GAAY,KAGZC,GAAY,KAGZC,GAAe,KAGfC,GAAa,KAEb,aAAc,CACZ,MAAM,EAED,KAAK,YACW,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAC1C,YAAYR,EAAS,QAAQ,UAAU,EAAI,CAAC,EAGrD,KAAK,aACP,KAAKK,GAAY,KAAK,WAAW,cAAc,QAAQ,EACvD,KAAKC,GAAY,KAAK,WAAW,cAAc,mBAAmB,EAClE,KAAKC,GAAe,KAAK,WAAW,cAAc,sBAAsB,EACxE,KAAKC,GAAa,KAAK,WAAW,cAAc,oBAAoB,EAExE,CAEA,WAAW,oBAAqB,CAC9B,MAAO,CAAC,UAAU,CACpB,CASA,yBAAyBC,EAAMC,EAAUC,EAAU,CAC7CF,IAAS,YAAcC,IAAaC,GAClC,KAAKN,KACP,KAAKA,GAAU,SAAW,KAAK,SAC/B,KAAKA,GAAU,aAAa,gBAAiB,KAAK,SAAS,SAAS,CAAC,EAEjE,KAAKA,GAAU,KAAK,SAAS,QAAQ,GACvC,KAAKA,GAAU,KAAK,OAAO,mBAAoB,KAAK,QAAQ,EAIpE,CAKA,mBAAoB,CAClB,KAAKO,GAAiB,OAAO,EAC7B,KAAKA,GAAiB,MAAM,EAC5B,KAAKA,GAAiB,UAAU,EAChC,KAAKA,GAAiB,kBAAkB,EAExC,KAAKP,IAAW,iBAAiB,QAAS,KAAKQ,EAAY,CAC7D,CAKA,sBAAuB,CACrB,KAAKR,IAAW,oBAAoB,QAAS,KAAKQ,EAAY,EAI9D,KAAKC,GAAkB,CACzB,CAQA,IAAI,OAAQ,CACV,OAAO,KAAK,aAAa,OAAO,GAAK,EACvC,CAEA,IAAI,MAAMC,EAAO,CACf,KAAK,aAAa,QAASA,GAAS,KAAOA,EAAM,SAAS,EAAIA,CAAK,CACrE,CAQA,IAAI,MAAO,CACT,OAAO,KAAK,aAAa,MAAM,GAAK,EACtC,CAEA,IAAI,KAAKA,EAAO,CACd,KAAK,aAAa,OAAQA,GAAS,KAAOA,EAAM,SAAS,EAAIA,CAAK,CACpE,CAQA,IAAI,UAAW,CACb,OAAO,KAAK,aAAa,UAAU,CACrC,CAEA,IAAI,SAASA,EAAO,CAClB,KAAK,gBAAgB,WAAY,CAAC,CAACA,CAAK,CAC1C,CAQA,IAAI,kBAAmB,CACrB,OAAO,OAAO,KAAK,aAAa,mBAAmB,CAAC,GAAK,GAC3D,CAEA,IAAI,iBAAiBA,EAAO,CAC1B,KAAK,aAAa,oBAAqBA,GAAS,KAAOA,EAAM,SAAS,EAAIA,CAAK,CACjF,CAKA,KAAMC,IAAQ,CACZ,GAAI,GAAC,KAAK,OAAS,CAAC,KAAK,MAIzB,GAAI,CACF,IAAIC,EAAY,GAEhB,GAAI,KAAK,MACPA,EAAY,KAAK,cACR,KAAK,KAAM,CACpB,IAAMC,EACJ,gBAAiB,QAAQ,UACrB,KAAKb,IAAW,YAAY,CAAE,SAAU,EAAK,CAAC,EAC9C,KAAKA,IAAW,cAEtB,GAAI,CAACa,GAAQ,EAAEA,aAAgB,UAAYA,aAAgB,YACzD,OAGF,IAAMC,EAAUD,EAAK,cAAc,KAAK,IAAI,EAE5C,GAAI,CAACC,EACH,OAGEA,aAAmB,kBAAoBA,aAAmB,oBAC5DF,EAAYE,EAAQ,MACXA,aAAmB,mBAAqBA,EAAQ,aAAa,MAAM,EAC5EF,EAAYE,EAAQ,KAEpBF,EAAYE,EAAQ,aAAe,EAEvC,CAEA,MAAM,UAAU,UAAU,UAAUF,CAAS,EAE7C,KAAKG,GAAYtB,CAAc,EAE/B,KAAK,cACH,IAAI,YAAY,GAAGuB,CAAc,WAAY,CAC3C,QAAS,GACT,SAAU,GACV,OAAQ,CAAE,MAAOJ,CAAU,CAC7B,CAAC,CACH,CACF,OAASK,EAAO,CACd,KAAKF,GAAYrB,CAAY,EAE7B,KAAK,cACH,IAAI,YAAY,GAAGsB,CAAc,SAAU,CACzC,QAAS,GACT,SAAU,GACV,OAAQ,CAAE,MAAAC,CAAM,CAClB,CAAC,CACH,CACF,CACF,CAOAT,GAAeU,GAAO,CACpBA,EAAI,eAAe,EAEf,OAAK,UAAY,KAAKnB,KAI1B,KAAKY,GAAM,CACb,EAOAI,GAAYI,EAAQ,CACd,KAAKlB,KACP,KAAKA,GAAU,OAAS,IAGtB,KAAKC,KACP,KAAKA,GAAa,OAASiB,IAAW1B,GAGpC,KAAKU,KACP,KAAKA,GAAW,OAASgB,IAAWzB,GAGtC,KAAKM,IAAW,KAAK,OAAO,iBAAiB,EAC7C,KAAKA,IAAW,KAAK,OAAO,eAAe,EAC3C,KAAKA,IAAW,KAAK,IAAI,WAAWmB,CAAM,EAAE,EAE5C,KAAKpB,IAAY,aAAa,KAAKA,EAAQ,EAE3C,KAAKA,GAAW,WAAW,IAAM,CAC3B,KAAKE,KACP,KAAKA,GAAU,OAAS,IAGtB,KAAKC,KACP,KAAKA,GAAa,OAAS,IAGzB,KAAKC,KACP,KAAKA,GAAW,OAAS,IAG3B,KAAKH,IAAW,KAAK,OAAO,WAAWmB,CAAM,EAAE,EAE/C,KAAKpB,GAAW,MAClB,EAAG,KAAK,gBAAgB,CAC1B,CAMAU,IAAoB,CAClB,KAAKV,IAAY,aAAa,KAAKA,EAAQ,EAC3C,KAAKA,GAAW,OAEZ,KAAKE,KACP,KAAKA,GAAU,OAAS,IAGtB,KAAKC,KACP,KAAKA,GAAa,OAAS,IAGzB,KAAKC,KACP,KAAKA,GAAW,OAAS,IAG3B,KAAKH,IAAW,KAAK,OAAO,iBAAiB,EAC7C,KAAKA,IAAW,KAAK,OAAO,eAAe,CAC7C,CAWAO,GAAiBa,EAAM,CAErB,IAAMC,EAAW,KAEjB,GAAI,OAAO,UAAU,eAAe,KAAKA,EAAUD,CAAI,EAAG,CACxD,IAAMV,EAAQW,EAASD,CAAI,EAC3B,OAAOC,EAASD,CAAI,EACpBC,EAASD,CAAI,EAAIV,CACnB,CACF,CAWA,OAAO,oBAAoBY,EAAcN,EAAgB,CACnD,OAAO,OAAW,KAAe,CAAC,OAAO,eAAe,IAAIM,CAAW,GACzE,OAAO,eAAe,OAAOA,EAAaxB,CAAa,CAE3D,CACF,ECtXAyB,EAAc,oBAAoB",
  "names": ["COMPONENT_NAME", "SUCCESS_STATUS", "ERROR_STATUS", "template", "styles", "ClipboardCopy", "_ClipboardCopy", "#timeout", "#buttonEl", "#copySlot", "#successSlot", "#errorSlot", "name", "oldValue", "newValue", "#upgradeProperty", "#handleClick", "#forceResetStatus", "value", "#copy", "copyValue", "root", "element", "#showStatus", "COMPONENT_NAME", "error", "evt", "status", "prop", "instance", "elementName", "ClipboardCopy"]
}
