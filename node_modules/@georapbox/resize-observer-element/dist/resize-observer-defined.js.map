{
  "version": 3,
  "sources": ["../src/resize-observer.js", "../src/resize-observer-defined.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\nconst styles = /* css */ `:host { display: contents; }`;\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */ `\n  <style>${styles}</style>\n  <slot></slot>\n`;\n\n/**\n * @summary A custom element that offers a declarative interface to the ResizeObserver API.\n * @documentation https://github.com/georapbox/resize-observer-element#readme\n *\n * @tagname resize-observer - This is the default tag name, unless overridden by the `defineCustomElement` method.\n *\n * @property {boolean} disabled - Whether the resize observer is disabled.\n *\n * @attribute {boolean} disabled - Reflects the disabled property.\n *\n * @slot - The default slot where the elements to observe are placed.\n *\n * @event resize-observer:resize - Dispatched when the observed elements are resized.\n *\n * @method defineCustomElement - Static method. Defines the custom element with the given name.\n */\nclass ResizeObserverElement extends HTMLElement {\n  /** @type {Nullable<HTMLSlotElement>} */\n  #slotEl = null;\n\n  /** @type {Nullable<ResizeObserver>} */\n  #resizeObserver = null;\n\n  /** @type {Element[]} */\n  #observedElements = [];\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    this.#slotEl = this.shadowRoot?.querySelector('slot') ?? null;\n  }\n\n  static get observedAttributes() {\n    return ['disabled'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'disabled' && oldValue !== newValue) {\n      this.disabled ? this.#stopObserver() : this.#startObserver();\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('disabled');\n\n    if ('ResizeObserver' in window) {\n      this.#resizeObserver = new ResizeObserver(entries => {\n        this.dispatchEvent(\n          new CustomEvent('resize-observer:resize', {\n            bubbles: true,\n            composed: true,\n            detail: { entries }\n          })\n        );\n      });\n\n      if (!this.disabled) {\n        this.#startObserver();\n      }\n\n      this.#slotEl?.addEventListener('slotchange', this.#handleSlotChange);\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */\n  disconnectedCallback() {\n    this.#stopObserver();\n    this.#slotEl?.removeEventListener('slotchange', this.#handleSlotChange);\n  }\n\n  /**\n   * @type {boolean} - Whether the resize observer is disabled.\n   * @default false\n   * @attribute disabled - Reflects the disabled property.\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', !!value);\n  }\n\n  /**\n   * Starts observing the elements in the slot.\n   */\n  #startObserver() {\n    if (!this.#slotEl || !this.#resizeObserver) {\n      return;\n    }\n\n    this.#observedElements.forEach(el => this.#resizeObserver?.unobserve(el));\n    this.#observedElements = [];\n\n    this.#slotEl.assignedElements().forEach(el => {\n      this.#resizeObserver?.observe(el);\n      this.#observedElements.push(el);\n    });\n  }\n\n  /**\n   * Stops observing the elements in the slot.\n   */\n  #stopObserver() {\n    this.#resizeObserver?.disconnect();\n  }\n\n  /**\n   * Handles slot change event.\n   */\n  #handleSlotChange = () => {\n    if (!this.disabled) {\n      this.#startObserver();\n    }\n  };\n\n  /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {'disabled'} prop - The property name to upgrade.\n   */\n  #upgradeProperty(prop) {\n    /** @type {any} */\n    const instance = this;\n\n    if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n      const value = instance[prop];\n      delete instance[prop];\n      instance[prop] = value;\n    }\n  }\n\n  /**\n   * Defines a custom element with the given name.\n   * The name must contain a dash (-).\n   *\n   * @param {string} [elementName='resize-observer'] - The name of the custom element.\n   * @example\n   *\n   * ResizeObserverElement.defineCustomElement('my-resize-observer');\n   */\n  static defineCustomElement(elementName = 'resize-observer') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ResizeObserverElement);\n    }\n  }\n}\n\nexport { ResizeObserverElement };\n", "import { ResizeObserverElement } from './resize-observer.js';\n\nResizeObserverElement.defineCustomElement();\n\nexport { ResizeObserverElement };\n"],
  "mappings": ";;;;;;;;;AASA,IAAMA,EAAmB,+BACnBC,EAAW,SAAS,cAAc,UAAU,EAElDA,EAAS,UAAuB;AAAA,WACrBD,CAAM;AAAA;AAAA,EAoBjB,IAAME,EAAN,MAAMC,UAA8B,WAAY,CAE9CC,GAAU,KAGVC,GAAkB,KAGlBC,GAAoB,CAAC,EAErB,aAAc,CACZ,MAAM,EAED,KAAK,YACW,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAC1C,YAAYL,EAAS,QAAQ,UAAU,EAAI,CAAC,EAGzD,KAAKG,GAAU,KAAK,YAAY,cAAc,MAAM,GAAK,IAC3D,CAEA,WAAW,oBAAqB,CAC9B,MAAO,CAAC,UAAU,CACpB,CASA,yBAAyBG,EAAMC,EAAUC,EAAU,CAC7CF,IAAS,YAAcC,IAAaC,IACtC,KAAK,SAAW,KAAKC,GAAc,EAAI,KAAKC,GAAe,EAE/D,CAKA,mBAAoB,CAClB,KAAKC,GAAiB,UAAU,EAE5B,mBAAoB,SACtB,KAAKP,GAAkB,IAAI,eAAeQ,GAAW,CACnD,KAAK,cACH,IAAI,YAAY,yBAA0B,CACxC,QAAS,GACT,SAAU,GACV,OAAQ,CAAE,QAAAA,CAAQ,CACpB,CAAC,CACH,CACF,CAAC,EAEI,KAAK,UACR,KAAKF,GAAe,EAGtB,KAAKP,IAAS,iBAAiB,aAAc,KAAKU,EAAiB,EAEvE,CAKA,sBAAuB,CACrB,KAAKJ,GAAc,EACnB,KAAKN,IAAS,oBAAoB,aAAc,KAAKU,EAAiB,CACxE,CAOA,IAAI,UAAW,CACb,OAAO,KAAK,aAAa,UAAU,CACrC,CAEA,IAAI,SAASC,EAAO,CAClB,KAAK,gBAAgB,WAAY,CAAC,CAACA,CAAK,CAC1C,CAKAJ,IAAiB,CACX,CAAC,KAAKP,IAAW,CAAC,KAAKC,KAI3B,KAAKC,GAAkB,QAAQU,GAAM,KAAKX,IAAiB,UAAUW,CAAE,CAAC,EACxE,KAAKV,GAAoB,CAAC,EAE1B,KAAKF,GAAQ,iBAAiB,EAAE,QAAQY,GAAM,CAC5C,KAAKX,IAAiB,QAAQW,CAAE,EAChC,KAAKV,GAAkB,KAAKU,CAAE,CAChC,CAAC,EACH,CAKAN,IAAgB,CACd,KAAKL,IAAiB,WAAW,CACnC,CAKAS,GAAoB,IAAM,CACnB,KAAK,UACR,KAAKH,GAAe,CAExB,EAWAC,GAAiBK,EAAM,CAErB,IAAMC,EAAW,KAEjB,GAAI,OAAO,UAAU,eAAe,KAAKA,EAAUD,CAAI,EAAG,CACxD,IAAMF,EAAQG,EAASD,CAAI,EAC3B,OAAOC,EAASD,CAAI,EACpBC,EAASD,CAAI,EAAIF,CACnB,CACF,CAWA,OAAO,oBAAoBI,EAAc,kBAAmB,CACtD,OAAO,OAAW,KAAe,CAAC,OAAO,eAAe,IAAIA,CAAW,GACzE,OAAO,eAAe,OAAOA,EAAahB,CAAqB,CAEnE,CACF,ECtLAiB,EAAsB,oBAAoB",
  "names": ["styles", "template", "ResizeObserverElement", "_ResizeObserverElement", "#slotEl", "#resizeObserver", "#observedElements", "name", "oldValue", "newValue", "#stopObserver", "#startObserver", "#upgradeProperty", "entries", "#handleSlotChange", "value", "el", "prop", "instance", "elementName", "ResizeObserverElement"]
}
